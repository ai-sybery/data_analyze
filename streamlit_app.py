import streamlit as st
import google.generativeai as genai
import time
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ –∏ –º–æ–¥–µ–ª–∏

api_key = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=api_key)
model = genai.GenerativeModel("gemini-1.5-pro-exp-0827")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç

system_prompt = """–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É (—Ä–∏—Ç–µ–π–ª –∏ –ø—Ä–æ–¥–∞–∂–∏). –î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏–∑ —Ç—Ä–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤:

–ê–ì–ï–ù–¢ 1 (–ê–Ω–∞–ª–∏—Ç–∏–∫):
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Chain-of-Thought (CoT)
- –†–∞–∑–±–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ —ç—Ç–∞–ø—ã
- –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø (rewards 0-1)
- –ü—Ä–∏ rewards < 0.9 –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é

–ê–ì–ï–ù–¢ 2 (–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç):
- –ü–∏—à–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç Python –∫–æ–¥
- –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (Matplotlib/Plotly/Seaborn)
- –ü–µ—Ä–µ–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ê–≥–µ–Ω—Ç—É 3

–ê–ì–ï–ù–¢ 3 (–í–∞–ª–∏–¥–∞—Ç–æ—Ä):
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (rewards 0-1)
- –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö:
- –û—Ü–µ–Ω–∏–≤–∞–π –¥–∏–Ω–∞–º–∏–∫—É –ø–æ —Å—Ç–æ–ª–±—Ü—É "–¥–æ–ª—è –æ—Ç –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, %"
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
- –°–ª–µ–¥—É–π —Ç–æ—á–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞

st.title("üìä Retail Analytics Assistant")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äì —è –ø–æ–º–æ–≥—É —Å –∞–Ω–∞–ª–∏–∑–æ–º!")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=['xlsx', 'csv'])
question = st.text_area(
    "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω—ã–º",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–≤–µ–¥–∏ ABC-–∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –°–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–ø-3",
    disabled=not uploaded_file
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
if uploaded_file and question:
    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if uploaded_file.name.endswith('.xlsx'):
            df = pd.read_excel(uploaded_file)
        else:
            df = pd.read_csv(uploaded_file)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        data_context = f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞:\n{df.head().to_string()}\n\n–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {df.shape}"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        prompt = f"""{system_prompt}
        
        –î–∞–Ω–Ω—ã–µ:
        {data_context}
        
        –í–æ–ø—Ä–æ—Å: {question}
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        response = model.generate_content(prompt, stream=True)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞
        response_container = st.empty()
        viz_container = st.empty()
        full_response = ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        for chunk in response:
            if chunk.text:
                full_response += chunk.text
                response_container.markdown(full_response)
                
                # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–æ–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                if "```python" in full_response and "plt" in full_response:
                    try:
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        code = full_response.split("```python")[1].split("```")[0]
                        exec(code)
                        viz_container.pyplot(plt.gcf())
                        plt.close()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π

def create_visualization(df, viz_type, params):
    if viz_type == "bar":
        fig = px.bar(df, **params)
    elif viz_type == "line":
        fig = px.line(df, **params)
    elif viz_type == "scatter":
        fig = px.scatter(df, **params)
    return fig

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
if "—Å–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏–∫" in question.lower():
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini
        viz_prompt = f"–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –î–∞–Ω–Ω—ã–µ: {df.head().to_string()}"
        viz_response = model.generate_content(viz_prompt)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        exec(viz_response.text)
        st.plotly_chart(fig)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
